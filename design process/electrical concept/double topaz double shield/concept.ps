%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Thu Aug 16 17:58:23 2012
%%Title: /home/fosse/Documents/work/chamber 6a/electrical/double topaz double shield/concept.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 208.000000 [(Chamber 6A Electrical Concept) ] 0 50000 40700 144.444443 text
grestore
gsave
false false false false 208.000000 [(EEF & IJS) ] 0 53900 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(2012.08.16) ] 0 53800 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(Concept.sch) ] 0 49900 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(1) ] 0 51500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(1) ] 0 50000 40100 144.444443 text
grestore
42600 47500 42800 47500 10 line
42800 44000 43800 44000 10 line
43000 43000 43000 47500 10 line
43000 43000 43800 43000 10 line
gsave
52400 47200 52700 47200 10 line
52000 47400 51700 47400 10 line
52000 47000 51700 47000 10 line
52400 47200 52040 47350 10 line
52400 48000 52700 48000 10 line
52000 48200 51700 48200 10 line
52000 47800 51700 47800 10 line
52390 48000 52040 48150 10 line
52240 48060 52240 47950 10 line
52240 47350 52240 47270 10 line
52240 47600 52240 47450 10 line
52240 47850 52240 47700 10 line
52040 48200 50 0 360 10 darc
52040 47800 50 0 360 10 darc
52040 47400 50 0 360 10 darc
52040 47000 50 0 360 10 darc
grestore
gsave
true false false false 260.000000 [(S1) ] 0 52210 48700 180.555557 text
grestore
gsave
true false false false 260.000000 [(Chamber Power) ] 0 52200 48500 180.555557 text
grestore
gsave
true false false false 260.000000 [(NOTE#4) ] 0 52200 48300 180.555557 text
grestore
48700 48500 50200 48500 10 line
50200 47800 51700 47800 10 line
50700 47000 51700 47000 10 line
49300 44000 54500 44000 10 line
gsave
false true false false 260.000000 [(HOTB) ] 0 54500 44100 180.555557 text
grestore
49300 43000 54500 43000 10 line
gsave
false true false false 260.000000 [(NEUTRALB) ] 0 54500 43100 180.555557 text
grestore
gsave
51100 45400 51100 45200 10 line
50950 45200 51250 45200 10 line
51250 45200 51200 45100 10 line
51100 45200 51050 45100 10 line
50950 45200 50900 45100 10 line
grestore
gsave
false false false false 260.000000 [(CHAMBER_GROUND) ] 0 51300 45300 180.555557 text
grestore
52700 48000 54500 48000 10 line
gsave
false true false false 260.000000 [(HOTA) ] 0 54500 48100 180.555557 text
grestore
52700 47200 54500 47200 10 line
gsave
false true false false 260.000000 [(NEUTRALA) ] 0 54500 47300 180.555557 text
grestore
54500 47600 53200 47600 10 line
gsave
false true false false 260.000000 [(GROUNDA) ] 0 54500 47700 180.555557 text
grestore
53200 46500 53200 49500 10 line
54700 48300 55000 48000 10 line
55000 48000 55000 47200 10 line
55000 47200 54700 46900 10 line
gsave
false false true false 260.000000 [("A Power") (To Chamber) (\(Inside\)) ] 0 55200 47600 180.555557 text
grestore
53400 43500 54500 43500 10 line
gsave
false true false false 260.000000 [(GROUNDB) ] 0 54500 43600 180.555557 text
grestore
gsave
50100 44500 50100 44700 10 line
50000 44500 50200 44500 10 line
50055 44450 50145 44450 10 line
50080 44410 50120 44410 10 line
grestore
gsave
false false false false 260.000000 [(DROP1) ] 0 50300 44600 180.555557 text
grestore
gsave
false false false false 260.000000 [(To building steel) ] 0 50300 44400 180.555557 text
grestore
50100 44700 50100 45700 10 line
gsave
45500 46000 45500 46200 10 line
45400 46000 45600 46000 10 line
45455 45950 45545 45950 10 line
45480 45910 45520 45910 10 line
grestore
gsave
false false false false 260.000000 [(DROP2) ] 0 45700 46100 180.555557 text
grestore
gsave
false false false false 260.000000 [(To building steel) ] 0 45700 45900 180.555557 text
grestore
45500 46200 45500 47500 10 line
gsave
45700 42000 45700 42200 10 line
45600 42000 45800 42000 10 line
45655 41950 45745 41950 10 line
45680 41910 45720 41910 10 line
grestore
gsave
false false false false 260.000000 [(DROP3) ] 0 45900 42100 180.555557 text
grestore
gsave
false false false false 260.000000 [(To building steel) ] 0 45900 41900 180.555557 text
grestore
45700 42200 45700 43000 10 line
54700 44200 55000 43900 10 line
55000 43900 55000 43100 10 line
55000 43100 54700 42800 10 line
gsave
false false true false 260.000000 [("B Power") (To Ctrl. Room) ] 0 55200 43500 180.555557 text
grestore
51700 48200 51300 48200 10 line
51300 46300 51300 48200 10 line
51300 47400 51700 47400 10 line
44500 46500 50900 46500 10 line
gsave
false false false false 260.000000 [(1. The CHAMBER_GROUND is the ground point for the booth which is a grounding block located ) (at the penetration where we run wire into the booth.) ] 0 40100 40900 180.555557 text
grestore
gsave
false false false false 260.000000 [(2. Each connection labeled DROPx goes to a distinct point on building steel on the same beam. ) (Ideally they would all use the same clamp if possible.) ] 0 40100 40500 180.555557 text
grestore
gsave
false false false false 260.000000 [(NOTES:) ] 0 40100 41300 180.555557 text
grestore
gsave
false true true false 260.000000 [(M-Floor) (Motor Generator ) (Distribution Panel) (Chamber 6 Breaker) (3 Phase 480V) ] 0 41800 45100 180.555557 text
grestore
44500 46500 44500 47200 10 line
44800 41700 44800 42700 10 line
41200 47800 40900 47500 10 line
40900 47500 40900 45900 10 line
40900 45900 41200 45600 10 line
gsave
false false false false 260.000000 [(3. S2 is actually the contactor. How that is wired is a minor separate issue to be visited later.) ] 0 40100 40300 180.555557 text
grestore
49800 50500 49800 50300 10 line
49800 48900 49800 48800 10 line
49800 48600 49800 48500 10 line
49800 48300 49800 48200 10 line
49800 48000 49800 47900 10 line
49800 47700 49800 47600 10 line
49800 47400 49800 47300 10 line
49800 47100 49800 47000 10 line
49800 46800 49800 46700 10 line
49800 46500 49800 46400 10 line
49800 50500 49900 50500 10 line
50400 50500 50500 50500 10 line
50700 50500 50800 50500 10 line
51000 50500 51100 50500 10 line
51300 50500 51400 50500 10 line
51600 50500 51700 50500 10 line
51900 50500 52000 50500 10 line
52200 50500 52300 50500 10 line
52500 50500 52600 50500 10 line
52800 50500 52900 50500 10 line
56400 50500 56500 50500 10 line
50100 45000 50200 45000 10 line
50400 45000 50500 45000 10 line
50700 45000 50800 45000 10 line
51000 45000 51100 45000 10 line
51300 45000 51400 45000 10 line
51600 45000 51700 45000 10 line
51900 45000 52000 45000 10 line
52200 45000 52300 45000 10 line
52500 45000 52600 45000 10 line
52800 45000 52900 45000 10 line
56400 45000 56500 45000 10 line
56500 46200 56500 46300 10 line
56500 46500 56500 46600 10 line
56500 46800 56500 46900 10 line
56500 47100 56500 47200 10 line
56500 47400 56500 47500 10 line
56500 47700 56500 47800 10 line
56500 48000 56500 48100 10 line
56500 48300 56500 48400 10 line
56500 48600 56500 48700 10 line
56500 48900 56500 49000 10 line
56500 50400 56500 50500 10 line
gsave
true false false false 260.000000 [(On/In Booth) ] 0 54800 45100 180.555557 text
grestore
53100 50500 53200 50500 10 line
53400 50500 53500 50500 10 line
53700 50500 53800 50500 10 line
54000 50500 54100 50500 10 line
54300 50500 54400 50500 10 line
54600 50500 54700 50500 10 line
54900 50500 55000 50500 10 line
55200 50500 55300 50500 10 line
55500 50500 55600 50500 10 line
55800 50500 55900 50500 10 line
56100 50500 56200 50500 10 line
53100 45000 53200 45000 10 line
53400 45000 53500 45000 10 line
53700 45000 53800 45000 10 line
54000 45000 54100 45000 10 line
54300 45000 54400 45000 10 line
54600 45000 54700 45000 10 line
54900 45000 55000 45000 10 line
55200 45000 55300 45000 10 line
55500 45000 55600 45000 10 line
55800 45000 55900 45000 10 line
56100 45000 56200 45000 10 line
gsave
false false false false 260.000000 [(4. S1 is on the booth and when off connects booth power to ground to reduce noise.) ] 0 40100 40100 180.555557 text
grestore
50200 47800 50200 49900 10 line
50200 49900 54500 49900 10 line
gsave
false true false false 260.000000 [(HOTA) ] 0 54500 50000 180.555557 text
grestore
53200 49500 54500 49500 10 line
gsave
false true false false 260.000000 [(GROUNDA) ] 0 54500 49600 180.555557 text
grestore
50700 47000 50700 49100 10 line
50700 49100 54500 49100 10 line
gsave
false true false false 260.000000 [(NEUTRALA) ] 0 54500 49200 180.555557 text
grestore
49800 49800 49800 49700 10 line
49800 49500 49800 49400 10 line
49800 49200 49800 49100 10 line
49800 50100 49800 50000 10 line
56500 49600 56500 49500 10 line
56500 49300 56500 49200 10 line
56500 49900 56500 49800 10 line
56500 50200 56500 50100 10 line
54700 50200 55000 49900 10 line
55000 49900 55000 49100 10 line
55000 49100 54700 48800 10 line
gsave
false false true false 260.000000 [("A Power") (To Chamber) (\(Outside\)) ] 0 55200 49500 180.555557 text
grestore
43500 47500 43000 47500 10 line
42600 45900 42800 45900 10 line
42800 45900 42800 44000 10 line
gsave
41900 45900 41600 45900 10 line
42300 45900 42600 45900 10 line
41900 45900 42260 46050 10 line
41900 46700 41600 46700 10 line
42300 46700 42600 46700 10 line
41910 46700 42260 46850 10 line
42060 46760 42060 46650 10 line
42060 46050 42060 45970 10 line
42060 46300 42060 46150 10 line
42060 46550 42060 46400 10 line
42260 46700 50 0 360 10 darc
42260 45900 50 0 360 10 darc
41900 47500 41600 47500 10 line
42300 47500 42600 47500 10 line
41910 47500 42260 47650 10 line
42060 47560 42060 47450 10 line
42060 47350 42060 47200 10 line
42260 47500 50 0 360 10 darc
42060 47050 42060 46900 10 line
grestore
gsave
true false false false 260.000000 [(S2) ] 0 42110 48100 180.555557 text
grestore
gsave
true false false false 260.000000 [(NOTE#3) ] 0 42100 47700 180.555557 text
grestore
gsave
true false false false 260.000000 [(Main Power) ] 0 42100 47900 180.555557 text
grestore
42600 46700 43000 46700 10 line
41300 47500 41600 47500 10 line
41300 46700 41600 46700 10 line
41600 45900 41300 45900 10 line
gsave
44000 48500 43700 48500 10 line
44000 48400 100 270 450 10 darc
44000 47800 100 270 450 10 darc
44000 47600 100 270 450 10 darc
44000 47500 43700 47500 10 line
44700 47500 45000 47500 10 line
44700 47600 100 90 270 10 darc
44700 47800 100 90 270 10 darc
44700 48400 100 90 270 10 darc
44700 48500 45000 48500 10 line
44300 48600 44300 47400 10 line
44400 48600 44400 47400 10 line
43700 47500 43500 47500 10 line
43700 48500 43500 48500 10 line
45200 47500 45000 47500 10 line
45200 48500 45000 48500 10 line
44000 48200 100 270 450 10 darc
44000 48000 100 270 450 10 darc
44700 48200 100 90 270 10 darc
44700 48000 100 90 270 10 darc
44200 48500 44200 48400 10 line
44200 48300 44200 48200 10 line
44200 48100 44200 48000 10 line
44200 47900 44200 47800 10 line
44200 47700 44200 47600 10 line
44200 47500 44200 47400 10 line
44200 47200 44200 47400 10 line
44500 48500 44500 48400 10 line
44500 48300 44500 48200 10 line
44500 48100 44500 48000 10 line
44500 47900 44500 47800 10 line
44500 47700 44500 47600 10 line
44500 47500 44500 47400 10 line
44500 47200 44500 47400 10 line
44300 47200 44300 47400 10 line
44400 47200 44400 47400 10 line
grestore
gsave
true false false false 260.000000 [(T1) ] 0 44300 48900 180.555557 text
grestore
gsave
true false false false 260.000000 [(TOPAZ Ultra Isolation 0.0005pF) ] 0 44300 48700 180.555557 text
grestore
gsave
false true true false 260.000000 [(480V) ] 0 43900 48000 180.555557 text
grestore
gsave
false false true false 260.000000 [(120V) ] 0 44800 48000 180.555557 text
grestore
gsave
44300 44000 44000 44000 10 line
44300 43900 100 270 450 10 darc
44300 43300 100 270 450 10 darc
44300 43100 100 270 450 10 darc
44300 43000 44000 43000 10 line
45000 43000 45300 43000 10 line
45000 43100 100 90 270 10 darc
45000 43300 100 90 270 10 darc
45000 43900 100 90 270 10 darc
45000 44000 45300 44000 10 line
44600 44100 44600 42900 10 line
44700 44100 44700 42900 10 line
44000 43000 43800 43000 10 line
44000 44000 43800 44000 10 line
45500 43000 45300 43000 10 line
45500 44000 45300 44000 10 line
44300 43700 100 270 450 10 darc
44300 43500 100 270 450 10 darc
45000 43700 100 90 270 10 darc
45000 43500 100 90 270 10 darc
44500 44000 44500 43900 10 line
44500 43800 44500 43700 10 line
44500 43600 44500 43500 10 line
44500 43400 44500 43300 10 line
44500 43200 44500 43100 10 line
44500 43000 44500 42900 10 line
44500 42700 44500 42900 10 line
44800 44000 44800 43900 10 line
44800 43800 44800 43700 10 line
44800 43600 44800 43500 10 line
44800 43400 44800 43300 10 line
44800 43200 44800 43100 10 line
44800 43000 44800 42900 10 line
44800 42700 44800 42900 10 line
44600 42700 44600 42900 10 line
44700 42700 44700 42900 10 line
grestore
gsave
true false false false 260.000000 [(T2) ] 0 44600 44400 180.555557 text
grestore
gsave
true false false false 260.000000 [(TOPAZ Ultra Isolation 0.0005pF) ] 0 44600 44200 180.555557 text
grestore
gsave
false true true false 260.000000 [(480V) ] 0 44200 43500 180.555557 text
grestore
gsave
false false true false 260.000000 [(120V) ] 0 45100 43500 180.555557 text
grestore
44200 46000 44200 47200 10 line
43200 46000 44400 46000 10 line
43200 42200 43200 46000 10 line
43200 42500 44700 42500 10 line
44500 42700 44500 42500 10 line
gsave
43200 42000 43200 42200 10 line
43100 42000 43300 42000 10 line
43155 41950 43245 41950 10 line
43180 41910 43220 41910 10 line
grestore
gsave
false false false false 260.000000 [(DROP4) ] 0 43400 42100 180.555557 text
grestore
gsave
false false false false 260.000000 [(To building steel) ] 0 43400 41900 180.555557 text
grestore
44300 47200 44300 46000 10 line
44600 42700 44600 42500 10 line
44400 47200 44400 46000 10 line
44700 42700 44700 42500 10 line
44800 41700 49500 41700 10 line
49500 41700 49500 46300 10 line
49500 46300 50600 46300 10 line
51300 46500 53200 46500 10 line
53400 43500 53400 46300 10 line
53400 46300 51600 46300 10 line
50900 46500 50900 46300 10 line
51100 45400 51100 45700 10 line
51100 45700 50100 45700 10 line
50600 46300 51100 45700 10 line
51300 46300 51100 45700 10 line
51600 46300 51100 45700 10 line
50900 46300 51100 45700 10 line
42800 47500 42800 48500 10 line
42800 48500 43500 48500 10 line
56500 45300 56500 45400 10 line
56500 45600 56500 45700 10 line
56500 45900 56500 46000 10 line
56500 45000 56500 45100 10 line
50100 50500 50200 50500 10 line
49800 46200 49800 46100 10 line
49800 45900 49800 45800 10 line
49800 45600 49800 45500 10 line
49800 45300 49800 45200 10 line
49800 45100 49800 45000 10 line
49800 45000 49900 45000 10 line
gsave
45700 47500 46000 47500 10 line
gsave
false false false false 260.000000 [(Neutral In) ] 0 46055 47495 180.555557 text
grestore
45700 48500 46000 48500 10 line
gsave
false false false false 260.000000 [(Hot In) ] 0 46055 48495 180.555557 text
grestore
46000 47000 48400 47000 10 line
48400 47000 48400 49000 10 line
48400 49000 46000 49000 10 line
46000 49000 46000 47000 10 line
47200 46700 47200 47000 10 line
gsave
false false true false 260.000000 [(Chassis) ] 90 47200 47055 180.555557 text
grestore
48700 47500 48400 47500 10 line
gsave
false true false false 260.000000 [(Neutral Out) ] 0 48345 47495 180.555557 text
grestore
48700 48500 48400 48500 10 line
gsave
false true false false 260.000000 [(Hot Out) ] 0 48345 48495 180.555557 text
grestore
grestore
gsave
true false false false 260.000000 [(MOD1) ] 0 47195 49295 180.555557 text
grestore
gsave
true false false false 260.000000 [(1 Phase Surge Suppressor) ] 0 47195 49095 180.555557 text
grestore
45200 47500 45700 47500 10 line
45200 48500 45700 48500 10 line
48700 47500 50700 47500 10 line
47200 46700 47200 46500 10 line
45500 43000 46300 43000 10 line
gsave
46300 43000 46600 43000 10 line
gsave
false false false false 260.000000 [(Neutral In) ] 0 46655 42995 180.555557 text
grestore
46300 44000 46600 44000 10 line
gsave
false false false false 260.000000 [(Hot In) ] 0 46655 43995 180.555557 text
grestore
46600 42500 49000 42500 10 line
49000 42500 49000 44500 10 line
49000 44500 46600 44500 10 line
46600 44500 46600 42500 10 line
47800 42200 47800 42500 10 line
gsave
false false true false 260.000000 [(Chassis) ] 90 47800 42555 180.555557 text
grestore
49300 43000 49000 43000 10 line
gsave
false true false false 260.000000 [(Neutral Out) ] 0 48945 42995 180.555557 text
grestore
49300 44000 49000 44000 10 line
gsave
false true false false 260.000000 [(Hot Out) ] 0 48945 43995 180.555557 text
grestore
grestore
gsave
true false false false 260.000000 [(MOD1) ] 0 47795 44795 180.555557 text
grestore
gsave
true false false false 260.000000 [(1 Phase Surge Suppressor) ] 0 47795 44595 180.555557 text
grestore
45500 44000 46300 44000 10 line
47800 41700 47800 42200 10 line
40900 46700 40500 46700 10 line
40500 46700 40500 45700 10 line
newpath
43000 46700
25
0 360 arc
fill
newpath
50200 48500
25
0 360 arc
fill
newpath
50200 48500
25
0 360 arc
fill
60 60 54470 43970 fbox
60 60 54470 42970 fbox
60 60 54470 47970 fbox
60 60 54470 47170 fbox
60 60 54470 47570 fbox
newpath
53200 47600
25
0 360 arc
fill
newpath
53200 47600
25
0 360 arc
fill
newpath
53200 47600
25
0 360 arc
fill
60 60 54470 43470 fbox
newpath
45500 47500
25
0 360 arc
fill
newpath
45500 47500
25
0 360 arc
fill
newpath
45700 43000
25
0 360 arc
fill
newpath
45700 43000
25
0 360 arc
fill
newpath
51300 47400
25
0 360 arc
fill
newpath
51300 46500
25
0 360 arc
fill
newpath
51300 47400
25
0 360 arc
fill
newpath
51300 47400
25
0 360 arc
fill
newpath
47200 46500
25
0 360 arc
fill
newpath
50200 48500
25
0 360 arc
fill
60 60 54470 49870 fbox
60 60 54470 49470 fbox
newpath
50700 47500
25
0 360 arc
fill
60 60 54470 49070 fbox
newpath
43000 46700
25
0 360 arc
fill
newpath
43000 46700
25
0 360 arc
fill
60 60 41270 47470 fbox
60 60 41270 46670 fbox
60 60 41270 45870 fbox
newpath
44200 46000
25
0 360 arc
fill
newpath
44200 46000
25
0 360 arc
fill
newpath
44200 46000
25
0 360 arc
fill
newpath
44300 46000
25
0 360 arc
fill
newpath
43200 42500
25
0 360 arc
fill
newpath
43200 42500
25
0 360 arc
fill
newpath
43200 42500
25
0 360 arc
fill
newpath
44500 42500
25
0 360 arc
fill
newpath
44600 42500
25
0 360 arc
fill
newpath
44500 42500
25
0 360 arc
fill
newpath
44500 42500
25
0 360 arc
fill
newpath
44300 46000
25
0 360 arc
fill
newpath
44300 46000
25
0 360 arc
fill
newpath
44600 42500
25
0 360 arc
fill
newpath
44600 42500
25
0 360 arc
fill
newpath
47800 41700
25
0 360 arc
fill
newpath
51300 46500
25
0 360 arc
fill
newpath
51300 46500
25
0 360 arc
fill
newpath
51100 45700
25
0 360 arc
fill
newpath
51100 45700
25
0 360 arc
fill
newpath
51100 45700
25
0 360 arc
fill
newpath
51100 45700
25
0 360 arc
fill
newpath
51100 45700
25
0 360 arc
fill
newpath
51100 45700
25
0 360 arc
fill
newpath
45500 47500
25
0 360 arc
fill
newpath
50700 47500
25
0 360 arc
fill
newpath
50700 47500
25
0 360 arc
fill
newpath
47200 46500
25
0 360 arc
fill
newpath
47200 46500
25
0 360 arc
fill
newpath
45700 43000
25
0 360 arc
fill
newpath
47800 41700
25
0 360 arc
fill
newpath
47800 41700
25
0 360 arc
fill
showpage
%%End
