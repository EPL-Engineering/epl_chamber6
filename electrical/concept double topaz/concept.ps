%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Mon Jul 23 13:59:54 2012
%%Title: /home/fosse/Documents/work/chamber 6a/electrical/concept double topaz/concept.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 500 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
false false false false 208.000000 [(Chamber 6A Electrical Concept) ] 0 50000 40700 144.444443 text
grestore
gsave
false false false false 208.000000 [(EEF & IJS) ] 0 53900 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(2012.07.23) ] 0 53800 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(Concept.sch) ] 0 49900 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(1) ] 0 51500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(1) ] 0 50000 40100 144.444443 text
grestore
44000 47500 46000 47500 10 line
44500 44500 46000 44500 10 line
45000 43500 45000 46700 10 line
45000 43500 46000 43500 10 line
gsave
46500 47500 46200 47500 10 line
46500 47400 100 270 450 10 darc
46500 46800 100 270 450 10 darc
46500 46600 100 270 450 10 darc
46500 46500 46200 46500 10 line
47100 46500 47400 46500 10 line
47100 46600 100 90 270 10 darc
47100 46800 100 90 270 10 darc
47100 47400 100 90 270 10 darc
47100 47500 47400 47500 10 line
46700 47600 46700 46400 10 line
46900 47600 46900 46400 10 line
46200 46500 46000 46500 10 line
46200 47500 46000 47500 10 line
47600 46500 47400 46500 10 line
47600 47500 47400 47500 10 line
46500 47200 100 270 450 10 darc
46500 47000 100 270 450 10 darc
47100 47200 100 90 270 10 darc
47100 47000 100 90 270 10 darc
46800 47500 46800 47400 10 line
46800 47300 46800 47200 10 line
46800 47100 46800 47000 10 line
46800 46900 46800 46800 10 line
46800 46700 46800 46600 10 line
46800 46500 46800 46400 10 line
46800 46200 46800 46400 10 line
grestore
gsave
true false false false 260.000000 [(T1) ] 0 46800 47900 180.555557 text
grestore
gsave
true false false false 260.000000 [(TOPAZ Ultra Isolation 0.0005pF) ] 0 46800 47700 180.555557 text
grestore
gsave
false false true false 260.000000 [(120V) ] 0 47200 47000 180.555557 text
grestore
gsave
false true true false 260.000000 [(480V) ] 0 46400 47000 180.555557 text
grestore
gsave
46500 44500 46200 44500 10 line
46500 44400 100 270 450 10 darc
46500 43800 100 270 450 10 darc
46500 43600 100 270 450 10 darc
46500 43500 46200 43500 10 line
47100 43500 47400 43500 10 line
47100 43600 100 90 270 10 darc
47100 43800 100 90 270 10 darc
47100 44400 100 90 270 10 darc
47100 44500 47400 44500 10 line
46700 44600 46700 43400 10 line
46900 44600 46900 43400 10 line
46200 43500 46000 43500 10 line
46200 44500 46000 44500 10 line
47600 43500 47400 43500 10 line
47600 44500 47400 44500 10 line
46500 44200 100 270 450 10 darc
46500 44000 100 270 450 10 darc
47100 44200 100 90 270 10 darc
47100 44000 100 90 270 10 darc
46800 44500 46800 44400 10 line
46800 44300 46800 44200 10 line
46800 44100 46800 44000 10 line
46800 43900 46800 43800 10 line
46800 43700 46800 43600 10 line
46800 43500 46800 43400 10 line
46800 43200 46800 43400 10 line
grestore
gsave
true false false false 260.000000 [(T2) ] 0 46800 44900 180.555557 text
grestore
gsave
true false false false 260.000000 [(TOPAZ Ultra Isolation 0.0005pF) ] 0 46800 44700 180.555557 text
grestore
gsave
false false true false 260.000000 [(120V) ] 0 47200 44000 180.555557 text
grestore
gsave
false true true false 260.000000 [(480V) ] 0 46400 44000 180.555557 text
grestore
gsave
52500 46700 52800 46700 10 line
52100 46900 51800 46900 10 line
52100 46500 51800 46500 10 line
52500 46700 52140 46850 10 line
52500 47500 52800 47500 10 line
52100 47700 51800 47700 10 line
52100 47300 51800 47300 10 line
52490 47500 52140 47650 10 line
52340 47560 52340 47450 10 line
52340 46850 52340 46770 10 line
52340 47100 52340 46950 10 line
52340 47350 52340 47200 10 line
52140 47700 50 0 360 10 darc
52140 47300 50 0 360 10 darc
52140 46900 50 0 360 10 darc
52140 46500 50 0 360 10 darc
grestore
gsave
true false false false 260.000000 [(S1) ] 0 52310 48200 180.555557 text
grestore
gsave
true false false false 260.000000 [(Chamber Power) ] 0 52300 48000 180.555557 text
grestore
gsave
true false false false 260.000000 [(NOTE#4) ] 0 52300 47800 180.555557 text
grestore
47600 47500 48000 47500 10 line
48000 47500 48000 47300 10 line
48000 47300 51800 47300 10 line
47600 46500 51800 46500 10 line
47600 44500 54500 44500 10 line
gsave
false true false false 260.000000 [(HOTB) ] 0 54500 44600 180.555557 text
grestore
47600 43500 54500 43500 10 line
gsave
false true false false 260.000000 [(NEUTRALB) ] 0 54500 43600 180.555557 text
grestore
gsave
53000 42700 53000 42500 10 line
52850 42500 53150 42500 10 line
53150 42500 53100 42400 10 line
53000 42500 52950 42400 10 line
52850 42500 52800 42400 10 line
grestore
gsave
false false false false 260.000000 [(CHAMBER_GROUND) ] 0 53200 42600 180.555557 text
grestore
52800 47500 54500 47500 10 line
gsave
false true false false 260.000000 [(HOTA) ] 0 54500 47600 180.555557 text
grestore
52800 46700 54500 46700 10 line
gsave
false true false false 260.000000 [(NEUTRALA) ] 0 54500 46800 180.555557 text
grestore
54500 47100 53000 47100 10 line
gsave
false true false false 260.000000 [(GROUNDA) ] 0 54500 47200 180.555557 text
grestore
53000 42700 53000 49000 10 line
54700 47800 55000 47500 10 line
55000 47500 55000 46700 10 line
55000 46700 54700 46400 10 line
gsave
false false true false 260.000000 [("A Power") (To Chamber) (\(Inside\)) ] 0 55200 47100 180.555557 text
grestore
53000 44000 54500 44000 10 line
gsave
false true false false 260.000000 [(GROUNDB) ] 0 54500 44100 180.555557 text
grestore
gsave
51000 42500 51000 42700 10 line
50900 42500 51100 42500 10 line
50955 42450 51045 42450 10 line
50980 42410 51020 42410 10 line
grestore
gsave
false false false false 260.000000 [(DROP1) ] 0 51200 42600 180.555557 text
grestore
gsave
false false false false 260.000000 [(To building steel) ] 0 51200 42400 180.555557 text
grestore
51000 42700 51000 43000 10 line
51000 43000 53000 43000 10 line
gsave
48000 45500 48000 45700 10 line
47900 45500 48100 45500 10 line
47955 45450 48045 45450 10 line
47980 45410 48020 45410 10 line
grestore
gsave
false false false false 260.000000 [(DROP2) ] 0 48200 45600 180.555557 text
grestore
gsave
false false false false 260.000000 [(To building steel) ] 0 48200 45400 180.555557 text
grestore
48000 45700 48000 46500 10 line
gsave
48000 42500 48000 42700 10 line
47900 42500 48100 42500 10 line
47955 42450 48045 42450 10 line
47980 42410 48020 42410 10 line
grestore
gsave
false false false false 260.000000 [(DROP3) ] 0 48200 42600 180.555557 text
grestore
gsave
false false false false 260.000000 [(To building steel) ] 0 48200 42400 180.555557 text
grestore
48000 42700 48000 43500 10 line
54700 44700 55000 44400 10 line
55000 44400 55000 43600 10 line
55000 43600 54700 43300 10 line
gsave
false false true false 260.000000 [("B Power") (To Chamber) ] 0 55200 44000 180.555557 text
grestore
51800 47700 51300 47700 10 line
51300 46000 51300 47700 10 line
51300 46900 51800 46900 10 line
51300 46000 53000 46000 10 line
gsave
false false false false 260.000000 [(1. The CHAMBER_GROUND is the ground point for the booth which is a grounding block located at the penetration where we run wire into the booth.) ] 0 41000 42000 180.555557 text
grestore
gsave
false false false false 260.000000 [(2. Each connection labeled DROPx goes to a distinct point on building steel on the same beam. Ideally they would all use the same clamp if possible.) ] 0 41000 41800 180.555557 text
grestore
gsave
false false false false 260.000000 [(NOTES:) ] 0 41000 42200 180.555557 text
grestore
gsave
false true true false 260.000000 [(M-Floor) (Motor Generator ) (Distribution Panel) (Chamber 6 Breaker) (3 Phase 480V) ] 0 42200 46700 180.555557 text
grestore
46800 46200 46800 46000 10 line
46800 46000 48000 46000 10 line
46800 43200 46800 43000 10 line
46800 43000 48000 43000 10 line
42600 47800 42300 47500 10 line
42300 47500 42300 45900 10 line
42300 45900 42600 45600 10 line
gsave
false false false false 260.000000 [(3. S2 is actually the contactor. How that is wired is a minor separate issue to be visited later.) ] 0 41000 41600 180.555557 text
grestore
50100 50000 50100 49800 10 line
50100 48400 50100 48300 10 line
50100 48100 50100 48000 10 line
50100 47800 50100 47700 10 line
50100 47500 50100 47400 10 line
50100 47200 50100 47100 10 line
50100 46900 50100 46800 10 line
50100 46600 50100 46500 10 line
50100 46300 50100 46200 10 line
50100 46000 50100 45900 10 line
50100 45700 50100 45600 10 line
50100 50000 50200 50000 10 line
50400 50000 50500 50000 10 line
50700 50000 50800 50000 10 line
51000 50000 51100 50000 10 line
51300 50000 51400 50000 10 line
51600 50000 51700 50000 10 line
51900 50000 52000 50000 10 line
52200 50000 52300 50000 10 line
52500 50000 52600 50000 10 line
52800 50000 52900 50000 10 line
56400 50000 56500 50000 10 line
50100 45600 50200 45600 10 line
50400 45600 50500 45600 10 line
50700 45600 50800 45600 10 line
51000 45600 51100 45600 10 line
51300 45600 51400 45600 10 line
51600 45600 51700 45600 10 line
51900 45600 52000 45600 10 line
52200 45600 52300 45600 10 line
52500 45600 52600 45600 10 line
52800 45600 52900 45600 10 line
56400 45600 56500 45600 10 line
56500 45600 56500 45800 10 line
56500 46000 56500 46100 10 line
56500 46300 56500 46400 10 line
56500 46600 56500 46700 10 line
56500 46900 56500 47000 10 line
56500 47200 56500 47300 10 line
56500 47500 56500 47600 10 line
56500 47800 56500 47900 10 line
56500 48100 56500 48200 10 line
56500 48400 56500 48500 10 line
56500 49900 56500 50000 10 line
gsave
true false false false 260.000000 [(On/In Booth) ] 0 54800 45700 180.555557 text
grestore
53100 50000 53200 50000 10 line
53400 50000 53500 50000 10 line
53700 50000 53800 50000 10 line
54000 50000 54100 50000 10 line
54300 50000 54400 50000 10 line
54600 50000 54700 50000 10 line
54900 50000 55000 50000 10 line
55200 50000 55300 50000 10 line
55500 50000 55600 50000 10 line
55800 50000 55900 50000 10 line
56100 50000 56200 50000 10 line
53100 45600 53200 45600 10 line
53400 45600 53500 45600 10 line
53700 45600 53800 45600 10 line
54000 45600 54100 45600 10 line
54300 45600 54400 45600 10 line
54600 45600 54700 45600 10 line
54900 45600 55000 45600 10 line
55200 45600 55300 45600 10 line
55500 45600 55600 45600 10 line
55800 45600 55900 45600 10 line
56100 45600 56200 45600 10 line
gsave
false false false false 260.000000 [(4. S1 is on the booth and when off connects booth power to ground to reduce noise.) ] 0 41000 41400 180.555557 text
grestore
50500 47300 50500 49400 10 line
50500 49400 54500 49400 10 line
gsave
false true false false 260.000000 [(HOTA) ] 0 54500 49500 180.555557 text
grestore
53000 49000 54500 49000 10 line
gsave
false true false false 260.000000 [(GROUNDA) ] 0 54500 49100 180.555557 text
grestore
51000 46500 51000 48600 10 line
51000 48600 54500 48600 10 line
gsave
false true false false 260.000000 [(NEUTRALA) ] 0 54500 48700 180.555557 text
grestore
50100 49300 50100 49200 10 line
50100 49000 50100 48900 10 line
50100 48700 50100 48600 10 line
50100 49600 50100 49500 10 line
56500 49100 56500 49000 10 line
56500 48800 56500 48700 10 line
56500 49400 56500 49300 10 line
56500 49700 56500 49600 10 line
54700 49700 55000 49400 10 line
55000 49400 55000 48600 10 line
55000 48600 54700 48300 10 line
gsave
false false true false 260.000000 [("A Power") (To Chamber) (\(Outside\)) ] 0 55200 49000 180.555557 text
grestore
46000 46500 45000 46500 10 line
44000 45900 44500 45900 10 line
44500 45900 44500 44500 10 line
gsave
43300 45900 43000 45900 10 line
43700 45900 44000 45900 10 line
43300 45900 43660 46050 10 line
43300 46700 43000 46700 10 line
43700 46700 44000 46700 10 line
43310 46700 43660 46850 10 line
43460 46760 43460 46650 10 line
43460 46050 43460 45970 10 line
43460 46300 43460 46150 10 line
43460 46550 43460 46400 10 line
43660 46700 50 0 360 10 darc
43660 45900 50 0 360 10 darc
43300 47500 43000 47500 10 line
43700 47500 44000 47500 10 line
43310 47500 43660 47650 10 line
43460 47560 43460 47450 10 line
43460 47350 43460 47200 10 line
43660 47500 50 0 360 10 darc
43460 47050 43460 46900 10 line
grestore
gsave
true false false false 260.000000 [(S2) ] 0 43510 48100 180.555557 text
grestore
gsave
true false false false 260.000000 [(NOTE#3) ] 0 43500 47700 180.555557 text
grestore
gsave
true false false false 260.000000 [(Main Power) ] 0 43500 47900 180.555557 text
grestore
44000 46700 45000 46700 10 line
42700 47500 43000 47500 10 line
42700 46700 43000 46700 10 line
43000 45900 42700 45900 10 line
newpath
45000 46500
25
0 360 arc
fill
newpath
50500 47300
25
0 360 arc
fill
newpath
48000 46500
25
0 360 arc
fill
newpath
51000 46500
25
0 360 arc
fill
60 60 54470 44470 fbox
60 60 54470 43470 fbox
newpath
48000 43500
25
0 360 arc
fill
60 60 54470 47470 fbox
60 60 54470 46670 fbox
60 60 54470 47070 fbox
newpath
53000 47100
25
0 360 arc
fill
newpath
53000 47100
25
0 360 arc
fill
newpath
53000 47100
25
0 360 arc
fill
newpath
53000 44000
25
0 360 arc
fill
newpath
53000 43000
25
0 360 arc
fill
newpath
53000 46000
25
0 360 arc
fill
newpath
53000 44000
25
0 360 arc
fill
60 60 54470 43970 fbox
newpath
53000 44000
25
0 360 arc
fill
newpath
53000 43000
25
0 360 arc
fill
newpath
53000 43000
25
0 360 arc
fill
newpath
48000 46500
25
0 360 arc
fill
newpath
48000 46500
25
0 360 arc
fill
newpath
48000 46000
25
0 360 arc
fill
newpath
48000 43500
25
0 360 arc
fill
newpath
48000 43500
25
0 360 arc
fill
newpath
48000 43000
25
0 360 arc
fill
newpath
51300 46900
25
0 360 arc
fill
newpath
51300 46900
25
0 360 arc
fill
newpath
51300 46900
25
0 360 arc
fill
newpath
53000 46000
25
0 360 arc
fill
newpath
53000 46000
25
0 360 arc
fill
newpath
48000 46000
25
0 360 arc
fill
newpath
48000 46000
25
0 360 arc
fill
newpath
48000 43000
25
0 360 arc
fill
newpath
48000 43000
25
0 360 arc
fill
newpath
50500 47300
25
0 360 arc
fill
newpath
50500 47300
25
0 360 arc
fill
60 60 54470 49370 fbox
60 60 54470 48970 fbox
newpath
51000 46500
25
0 360 arc
fill
newpath
51000 46500
25
0 360 arc
fill
60 60 54470 48570 fbox
newpath
45000 46500
25
0 360 arc
fill
newpath
45000 46500
25
0 360 arc
fill
60 60 42670 47470 fbox
60 60 42670 46670 fbox
60 60 42670 45870 fbox
showpage
%%End
